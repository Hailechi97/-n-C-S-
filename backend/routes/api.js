const express = require("express");
const con = require("../config/db");

const router = express.Router();

// üõ† H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
function formatTime(dateTime) {
  console.log("üìÖ Raw dateTime:", dateTime); // Debug gi√° tr·ªã ƒë·∫ßu v√†o
  if (!dateTime) return "N/A"; // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu r·ªóng

  const parsedDate = new Date(dateTime);
  if (isNaN(parsedDate)) {
    console.warn("‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian:", dateTime);
    return "Invalid Date";
  }

  const hours = parsedDate.getHours().toString().padStart(2, "0");
  const minutes = parsedDate.getMinutes().toString().padStart(2, "0");
  const day = parsedDate.getDate().toString().padStart(2, "0");
  const month = (parsedDate.getMonth() + 1).toString().padStart(2, "0");
  const year = parsedDate.getFullYear();
  return `${hours}:${minutes} - ${day}/${month}/${year}`;
}

// üöÄ API L·ªãch h·ªçp
router.get("/meetings", (req, res) => {
  con.query(
    "SELECT Title, StartTime, Content FROM Meetings",
    (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói truy v·∫•n MySQL (meetings):", err.sqlMessage);
        return res.status(500).json({ message: "L·ªói server" });
      }

      const meetings = results.map((meeting) => ({
        Title: meeting.Title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
        Content: meeting.Content || "N·ªôi dung tr·ªëng",
        FormattedStartTime: formatTime(meeting.StartTime),
      }));

      console.log("‚úÖ Meetings response:", meetings);
      res.json(meetings);
    }
  );
});

// üöÄ API Nh√¢n vi√™n
router.get("/employees", (req, res) => {
  con.query(
    "SELECT FirstName, LastName, ChucVu, Status FROM Employees",
    (err, results) => {
      if (err) {
        console.error("‚ùå L·ªói truy v·∫•n MySQL (employees):", err.sqlMessage);
        return res.status(500).json({ message: "L·ªói server" });
      }

      const employees = results.map((emp) => ({
        FullName: `${emp.FirstName || ""} ${emp.LastName || ""}`.trim(),
        Position: emp.ChucVu || "Kh√¥ng r√µ ch·ª©c v·ª•",
        Status: emp.Status || "Ch∆∞a c·∫≠p nh·∫≠t",
      }));

      console.log("‚úÖ Employees response:", employees);
      res.json(employees);
    }
  );
});

module.exports = router;
